{

  parserClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.GdxJsonParser'
  parserUtilClass="com.gmail.blueboxware.libgdxplugin.filetypes.json.GdxJsonParserUtil"
  psiPackage = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.psi'
  psiImplPackage = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl'

  elementTypeHolderClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.GdxJsonElementTypes'
  elementTypeClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.GdxJsonElementType'
  psiClassPrefix = "GdxJson"
  psiVisitorName = "GdxJsonElementVisitor"

  tokenTypeClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.GdxJsonTokenType'

  implements("jobject|array|value|property") = "com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.GdxJsonElement"
  implements("string") = "com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.GdxJsonLiteral"
  implements("property_name") = "com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.GdxJsonString"
  implements("property") = "com.intellij.psi.PsiNamedElement"

  name("jobject") = 'object'
  name("property_name") = 'property name'

  tokens = [
        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'
        COMMA=','
        COLON=':'
        SLASH='/'
        ASTERIX='*'

        LINE_COMMENT='LINE COMMENT'
        BLOCK_COMMENT='BLOCK COMMENT'

        DOUBLE_QUOTED_STRING='QUOTED STRING'
        STRING_PART='STRING'

    ]

}

json ::= value?

value ::= jobject | array | string {
    methods=[
        getValue
        isPropertyValue
        isObject
    ]
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonValueMixin"
}

jobject ::= '{' separator? ('}' | object_element* COMMA? '}'?) {
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonJobjectMixin"
    pin=1
    methods=[
        getProperty
        getProperties
    ]
}

private object_element ::= property (separator|&'}') {
  recoverWhile = not_brace_or_next_value
  pin = 1
}

private not_brace_or_next_value ::= !('}'|value|separator)

property ::= property_name ':' value {
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonPropertyMixin"
    pin=1
}

array ::= '['  separator? array_element* COMMA? ']' {
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonArrayMixin"
    pin=1
}

private array_element ::= value (separator|&']') {
    pin=1
    recoverWhile=not_bracket_or_next_value
}

private not_bracket_or_next_value ::= !(']'|value|separator)

string ::= DOUBLE_QUOTED_STRING | unquoted_value_string {
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonStringMixin"
    methods=[
        isQuoted
        isKeyword
        isNumber
    ]
}

property_name ::= DOUBLE_QUOTED_STRING | unquoted_key_string {
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonPropertyNameMixin"
}

private unquoted_key_string ::=
    (STRING_PART | L_CURLY | L_BRACKET | ASTERIX | SLASH)
    (<<no_comment_or_newline>> (STRING_PART | DOUBLE_QUOTED_STRING | L_CURLY | L_BRACKET | R_BRACKET | COMMA | ASTERIX | SLASH))*

private unquoted_value_string ::=
    (STRING_PART | L_CURLY | ASTERIX | SLASH | BACK_SLASH)
    (<<no_comment_or_newline>> (STRING_PART | DOUBLE_QUOTED_STRING | COLON | L_CURLY | L_BRACKET | DOUBLE_QUOTE | ASTERIX | SLASH))*

private separator ::= <<parseSeparator>>
