{

  parserClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.GdxJsonParser'
  parserUtilClass="com.gmail.blueboxware.libgdxplugin.filetypes.json.GdxJsonParserUtil"
  psiPackage = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.psi'
  psiImplPackage = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl'

  elementTypeHolderClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.GdxJsonElementTypes'
  elementTypeClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.GdxJsonElementType'
  psiClassPrefix = "GdxJson"
  psiVisitorName = "GdxJsonElementVisitor"

  tokenTypeClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.json.GdxJsonTokenType'

  implements("jobject|array|value|property") = "com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.GdxJsonElement"
  implements("string") = "com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.GdxJsonLiteral"
  implements("property_name") = "com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.GdxJsonString"

  name("jobject") = 'object'
  name("property_name") = 'property name'

  tokens = [
        NEWLINE='NEWLINE'
        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'
        COMMA=','
        COLON=':'
        DOUBLE_QUOTE='"'
        SLASH='/'
        BACK_SLASH='\'
        ASTERIX='*'

        LINE_COMMENT='LINE COMMENT'
        BLOCK_COMMENT='BLOCK COMMENT'

        DOUBLE_QUOTED_STRING='QUOTED STRING'
        STRING_PART='STRING'

    ]

}

// TODO: Check for string/number: not valid at toplevel
json ::=  NEWLINE* value NEWLINE* | NEWLINE*

value ::= jobject | array | string {
    methods=[
        getValue
        isPropertyValue
    ]
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonValueMixin"
}

jobject ::= '{' separator? '}' | '{' separator? property?  (separator  property)* COMMA? NEWLINE*'}' {
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonJobjectMixin"
    methods=[
        getProperty
        getProperties
    ]
}

property ::= property_name NEWLINE* ':' NEWLINE* value {
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonPropertyMixin"
    pin = 3
    recoverWhile = "#auto"
}

array ::= '['  NEWLINE* value?  (separator  value)* separator?  ']' {
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonArrayMixin"
}

string ::= DOUBLE_QUOTED_STRING | unquoted_value_string {
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonStringMixin"
    methods=[
        isQuoted
        isKeyword

        DOUBLE_QUOTED_STRING=""
    ]
}

property_name ::= DOUBLE_QUOTED_STRING | unquoted_key_string {
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.json.psi.impl.mixins.GdxJsonPropertyNameMixin"
    methods=[
        getValue
        isQuoted

        DOUBLE_QUOTED_STRING=""
    ]
}

private unquoted_key_string ::= (STRING_PART | L_CURLY | R_CURLY | L_BRACKET | R_BRACKET | COMMA | DOUBLE_QUOTE)+

private unquoted_value_string ::= (STRING_PART | COLON | L_CURLY | L_BRACKET | DOUBLE_QUOTE)+

private separator ::= NEWLINE* COMMA NEWLINE* | NEWLINE+