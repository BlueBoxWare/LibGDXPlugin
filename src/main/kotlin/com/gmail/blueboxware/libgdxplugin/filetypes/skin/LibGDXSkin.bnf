//noinspection RegExpRedundantEscapeForFile
{
  parserClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.SkinParser'
  parserUtilClass="com.gmail.blueboxware.libgdxplugin.filetypes.skin.SkinParserUtil"
  psiPackage = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi'
  psiImplPackage = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl'

  elementTypeHolderClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.SkinElementTypes'
  elementTypeClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.SkinElementType'
  psiClassPrefix = "Skin"
  psiVisitorName = "SkinElementVisitor"

  tokenTypeClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.SkinTokenType'

  implements("value|property_name|resource_name|property_value|class_name|resources") = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.SkinElement"
  extends("value|resources") = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.SkinElementImpl"

  implements("resource|property|class_specification") = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.SkinNamedElement"

  extends("string_literal|array|object")=value

  extends("class_specification")="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.SkinElementImpl"

  tokens = [
        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'
        COMMA=','
        COLON=':'

        LINE_COMMENT='regexp://.*'
        BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'

        DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\n\r])*\"?"
        UNQUOTED_STRING="regexp:([^\\\":,{}\[\]/\r\n\t ]|\\[^\n\r])([^\\:}\]/,\r\n\t ]|/[^/*:]|\\[^\n\r])*"
    ]

}

skin ::= '{'  class_specification? (separator class_specification)* optionalComma '}' {
    pin = 1
}

class_specification ::= class_name class_spec_colon class_spec_lbrace resources '}' {
    methods=[
        resolveClass
        getClassNameAsString
        getResourcesAsList
        getResourceNames
        getResource
        addComment
    ]
    pin = 1
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinClassSpecificationMixin"
}

private class_spec_colon ::= ':' {
    recoverWhile = recover_class_colon
}
private recover_class_colon ::= !'{'

private class_spec_lbrace ::= '{' {
    recoverWhile = recover_class_lbrace
}
private recover_class_lbrace ::= !(string_literal | '}')

class_name ::= string_literal {
    methods=[
        getValue
        setValue
        resolve
        multiResolve
    ]
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinClassNameMixin"
}

resources ::= resource? (separator resource)* optionalComma {
    pin = 1
    recoverWhile = recover_class
}
private recover_class ::= !'}'

resource ::= resource_name ':' (object | string_literal) {
    methods = [
        getName
        getClassSpecification
        getObject
        getString
        findDefinition
        asColor
    ]
    mixin = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinResourceMixin"
    pin = 1
}

resource_name ::= string_literal {
    methods = [
        getResource
    ]
    mixin = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinResourceNameMixin"
}

object ::= '{' resource_list '}' {
    methods = [
        asColor
        asResource
        getPropertyNames
        addProperty
        addComment
        getProperty
        resolveToField
    ]
    pin = 2
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinObjectMixin"
}

private resource_list ::= property? (separator property)* optionalComma {
    recoverWhile = recover_object
}
private recover_object ::= !'}'

property ::= property_name ':' property_value {
      methods=[
        getName
        getValue
        getContainingObject
        resolveToField
        resolveToType
        resolveToTypeString
      ]
      mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinPropertyMixin"
      pin = 1
      recoverWhile = recover_property
}
private recover_property ::= !(separator | '}')

property_name ::= string_literal {
        methods=[
            getProperty
            getValue
        ]
        mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinPropertyNameMixin"
}

property_value ::= value {
    methods = [
        getProperty
    ]
    mixin = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinPropertyValueMixin"
}

value ::= object | array | string_literal {
    methods=[
        getProperty
        isBoolean
        resolveToType
        resolveToTypeString
        resolveToClass
    ]
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinValueMixin"
}

array ::= '[' value? (separator value)* optionalComma ']' {
    pin=2
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinArrayMixin"
}

string_literal ::= DOUBLE_QUOTED_STRING | UNQUOTED_STRING {
      methods=[
        getValue
        setValue
        asPropertyName
        isQuoted

        DOUBLE_QUOTED_STRING=""
        UNQUOTED_STRING=""
      ]
      mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinStringLiteralMixin"
}

external private separator ::= parseSeparator
external private optionalComma ::= parseOtionalComma