{
  parserClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.SkinParser'
  parserUtilClass="com.gmail.blueboxware.libgdxplugin.filetypes.skin.SkinParserUtil"
  psiPackage = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi'
  psiImplPackage = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl'

  elementTypeHolderClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.SkinElementTypes'
  elementTypeClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.SkinElementType'
  psiClassPrefix = "Skin"
  psiVisitorName = "SkinElementVisitor"

  tokenTypeClass = 'com.gmail.blueboxware.libgdxplugin.filetypes.skin.SkinTokenType'

  implements("value|property_name|resource_name|property_value|class_name") = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.SkinElement"
  extends("value") = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.SkinElementImpl"

  implements("resource|property|class_specification") = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.SkinNamedElement"

  extends("literal|array|object")=value

  extends("class_specification")="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.SkinElementImpl"
  extends("boolean_literal|number_literal|string_literal|null_literal")=literal

  tokens = [
        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'
        COMMA=','
        COLON=':'

        LINE_COMMENT='regexp://.*'
        BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'

        DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

        NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?|-?\.\d+'

        UNQUOTED_STRING="regexp:[^ \t\n\r\{\}\[\]\"':,]+"

        TRUE='true'
        FALSE='false'
        NULL='null'
    ]


}

skin ::= '{'  class_specification? (separator class_specification)* optionalComma '}' {
    pin = 1
}

class_specification ::= class_name ':' '{' resources optionalComma '}' {
    methods=[
        resolveClass
        getClassNameAsString
        getResourcesAsList
        getResourceNames
        getResource
        value=""
        className="string_literal"
    ]
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinClassSpecificationMixin"
    pin(".*") = 1
}


class_name ::= string_literal {
    methods=[
        getValue
        resolve
        multiResolve
    ]
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinClassNameMixin"
}

resources ::= resource? (separator resource)* {
    pin = 1
}

resource ::= resource_name ':' (object | string_literal) {
    methods = [
        getName
        getClassSpecification
        getObject
        getString
        findDefinition
        asColor
    ]
    mixin = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinResourceMixin"
    pin(".*") = 1
}

resource_name ::= string_literal {
    methods = [
        getResource
    ]
    mixin = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinResourceNameMixin"
}

object ::= '{' property? (separator property)* optionalComma '}' {
    methods = [
        asColor
        asResource
        getPropertyNames
        setColor
        addProperty
        getProperty
        resolveToField
    ]
    pin = 2
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinObjectMixin"
}

property ::= property_name ':' property_value {
      methods=[
        getName
        getValue
        getContainingObject
        resolveToField
        resolveToType
        resolveToTypeString
      ]
      mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinPropertyMixin"
      pin(".*") = 1
}

property_name ::= string_literal {
        methods=[
            getProperty
            getValue
        ]
        mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinPropertyNameMixin"
}


property_value ::= value {
    methods = [
        getProperty
    ]
    mixin = "com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinPropertyValueMixin"
}

value ::= object | array | literal {
    methods=[
        getProperty
        resolveToType
        resolveToTypeString
        resolveToClass
    ]
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinValueMixin"
}

array ::= '[' value? (separator value)* optionalComma ']' {
    pin=2
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinArrayMixin"
}

literal ::= string_literal | number_literal | boolean_literal | null_literal {
      methods=[
        asFloat
        asString
        getQuotationChar
      ]
      mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinLiteralMixin"
}

string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING | UNQUOTED_STRING {
      methods=[
        getValue
        setValue
        asPropertyName

        SINGLE_QUOTED_STRING=""
        DOUBLE_QUOTED_STRING=""
        UNQUOTED_STRING=""
      ]
      mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinStringLiteralMixin"
}
number_literal ::= NUMBER {
      methods=[
        getValue
        NUMBER=""
      ]
      mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinNumberLiteralMixin"
}

boolean_literal ::= TRUE | FALSE {
    methods=[
        getValue
    ]
    mixin="com.gmail.blueboxware.libgdxplugin.filetypes.skin.psi.impl.mixins.SkinBooleanLiteralMixin"
}

null_literal ::= NULL

external private separator ::= parseSeparator
external private optionalComma ::= parseOtionalComma