package com.gmail.blueboxware.libgdxplugin.settings;

import com.gmail.blueboxware.libgdxplugin.utils.LanguageSubstitutionUtilsKt;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;
import java.util.ResourceBundle;

/*
 * Copyright 2018 Blue Box Ware
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
public class LibGDXPluginSettingsPane {
    private JPanel root;
    private JCheckBox showPreviewsOfColorCheckBox;
    private JCheckBox neverAskAboutSkinFiles;
    private JCheckBox showPreviewsOfColorInSkinCheckBox;
    private JCheckBox neverAskAboutJsonFiles;
    private JButton resetSkin;
    private JButton resetJson;
    private JCheckBox showPreviewsOfColorsInJsonCheckbox;

    private LibGDXPluginSettings settings = new LibGDXPluginSettings();

    @SuppressWarnings("UnusedReturnValue")
    JComponent createPanel(@NotNull LibGDXPluginSettings settings) {
        this.settings = settings;

        resetJson.addActionListener(e -> LanguageSubstitutionUtilsKt.resetJsonAssociations(root));

        resetSkin.addActionListener(e -> LanguageSubstitutionUtilsKt.resetSkinAssociations(root));

        return root;
    }

    void apply() {
        settings.setEnableColorAnnotations(showPreviewsOfColorCheckBox.isSelected());
        settings.setEnableColorAnnotationsInJson(showPreviewsOfColorsInJsonCheckbox.isSelected());
        settings.setEnableColorAnnotationsInSkin(showPreviewsOfColorInSkinCheckBox.isSelected());
        settings.setNeverAskAboutSkinFiles(neverAskAboutSkinFiles.isSelected());
        settings.setNeverAskAboutJsonFiles(neverAskAboutJsonFiles.isSelected());
    }

    void reset() {
        showPreviewsOfColorCheckBox.setSelected(settings.getEnableColorAnnotations());
        showPreviewsOfColorsInJsonCheckbox.setSelected(settings.getEnableColorAnnotationsInJson());
        showPreviewsOfColorInSkinCheckBox.setSelected(settings.getEnableColorAnnotationsInSkin());
        neverAskAboutSkinFiles.setSelected(settings.getNeverAskAboutSkinFiles());
        neverAskAboutJsonFiles.setSelected(settings.getNeverAskAboutJsonFiles());
    }

    @SuppressWarnings("UnusedReturnValue")
    boolean isModified() {
        return showPreviewsOfColorCheckBox.isSelected() != settings.getEnableColorAnnotations()
                || showPreviewsOfColorsInJsonCheckbox.isSelected() != settings.getEnableColorAnnotationsInJson()
                || showPreviewsOfColorInSkinCheckBox.isSelected() != settings.getEnableColorAnnotationsInSkin()
                || neverAskAboutSkinFiles.isSelected() != settings.getNeverAskAboutSkinFiles()
                || neverAskAboutJsonFiles.isSelected() != settings.getNeverAskAboutJsonFiles()
                ;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(9, 3, new Insets(0, 0, 0, 0), -1, -1));
        showPreviewsOfColorCheckBox = new JCheckBox();
        this.$$$loadButtonText$$$(showPreviewsOfColorCheckBox, ResourceBundle.getBundle("libgdxplugin").getString("settings.enable.color.previews"));
        root.add(showPreviewsOfColorCheckBox, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        root.add(spacer1, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        neverAskAboutSkinFiles = new JCheckBox();
        this.$$$loadButtonText$$$(neverAskAboutSkinFiles, ResourceBundle.getBundle("libgdxplugin").getString("settings.never.ask.about.skin.files"));
        root.add(neverAskAboutSkinFiles, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showPreviewsOfColorInSkinCheckBox = new JCheckBox();
        this.$$$loadButtonText$$$(showPreviewsOfColorInSkinCheckBox, ResourceBundle.getBundle("libgdxplugin").getString("settings.enable.color.previews.skin"));
        root.add(showPreviewsOfColorInSkinCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        neverAskAboutJsonFiles = new JCheckBox();
        this.$$$loadButtonText$$$(neverAskAboutJsonFiles, ResourceBundle.getBundle("libgdxplugin").getString("settings.never.ask.about.json.files"));
        root.add(neverAskAboutJsonFiles, new GridConstraints(6, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        root.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 20), null, null, 0, false));
        resetSkin = new JButton();
        resetSkin.setText("Reset Skin associations...");
        root.add(resetSkin, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        resetJson = new JButton();
        resetJson.setText("Reset JSON associations...");
        root.add(resetJson, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        showPreviewsOfColorsInJsonCheckbox = new JCheckBox();
        this.$$$loadButtonText$$$(showPreviewsOfColorsInJsonCheckbox, ResourceBundle.getBundle("libgdxplugin").getString("settings.enable.color.previews.json"));
        root.add(showPreviewsOfColorsInJsonCheckbox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    @SuppressWarnings("EmptyMethod")
    private void createUIComponents() {

    }
}
