package com.gmail.blueboxware.libgdxplugin.settings;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;
import java.util.ResourceBundle;

/*
 * Copyright 2018 Blue Box Ware
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
public class LibGDXPluginSettingsPane {
  private JPanel root;
  private JCheckBox showPreviewsOfColorCheckBox;
  private JCheckBox neverAskAboutSkinFiles;

  private LibGDXPluginSettings settings = new LibGDXPluginSettings();

  JComponent createPanel(@NotNull LibGDXPluginSettings settings) {
    this.settings = settings;
    return root;
  }

  void apply() {
    settings.setEnableColorAnnotations(showPreviewsOfColorCheckBox.isSelected());
    settings.setNeverAskAboutSkinFiles(neverAskAboutSkinFiles.isSelected());
  }

  void reset() {
    showPreviewsOfColorCheckBox.setSelected(settings.getEnableColorAnnotations());
    neverAskAboutSkinFiles.setSelected(settings.getNeverAskAboutSkinFiles());
  }

  boolean isModified() {
    return showPreviewsOfColorCheckBox.isSelected() != settings.getEnableColorAnnotations()
            || neverAskAboutSkinFiles.isSelected() != settings.getNeverAskAboutSkinFiles();
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    root = new JPanel();
    root.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
    showPreviewsOfColorCheckBox = new JCheckBox();
    this.$$$loadButtonText$$$(showPreviewsOfColorCheckBox, ResourceBundle.getBundle("libgdxplugin").getString("settings.enable.color.previews"));
    root.add(showPreviewsOfColorCheckBox, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer1 = new Spacer();
    root.add(spacer1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    neverAskAboutSkinFiles = new JCheckBox();
    neverAskAboutSkinFiles.setActionCommand("Never ask about treating Json files which look like Skin files as Skin files");
    this.$$$loadButtonText$$$(neverAskAboutSkinFiles, ResourceBundle.getBundle("libgdxplugin").getString("settings.never.ask.about.skin.files"));
    root.add(neverAskAboutSkinFiles, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadButtonText$$$(AbstractButton component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return root;
  }
}
