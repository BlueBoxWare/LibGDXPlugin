#
# Copyright 2016 Blue Box Ware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
gwt.build.outdated.title=GWT outdated
gwt.build.outdated.body=*.gwt.xml files have been changed. The module needs a full rebuild, by deleting the build and war directories.

suppress.object=Suppress for object
suppress.property= Suppress for property
suppress.string=Suppress for string
suppress.file=Suppress for entire file

skin.error.annotator.escape=Illegal escape sequence
skin.error.annotator.closing.quote=Missing closing quote

skin.inspection.non.existing.resource.alias.description=Looks in Skin files for resource aliases for resources which do not exist.
skin.inspection.non.existing.resource.alias.display.name=Non existing resources in Skin files
skin.inspection.non.existing.resource.alias.message=''{0}'' does not refer to anything. Resources must be defined before they can be used.

skin.inspection.non.existing.class.description=Looks in Skin files for classes that don't exist and the use of non static inner classes.
skin.inspection.non.existing.class.display.name=Non existing classes in Skin files
skin.inspection.non.existing.class.message=Class ''{0}'' does not exist.
skin.inspection.non.static.class.message=Inner class ''{0}'' is not static

skin.inspection.non.existing.field.description=Looks in Skin files for fields/properties that don't exist.
skin.inspection.non.existing.field.display.name=Non existing fields in Skin files
skin.inspection.non.existing.field.message=Class ''{0}'' does not have a property named ''{1}''.
skin.inspection.non.existing.field.message.BitmapFont=''{0}'' is not a valid property for BitmapFont.

skin.inspection.types.description=Looks for type errors in Skin files.
skin.inspection.types.display.name=Type errors in Skin files
skin.inspection.types.type.expected={0} expected
skin.inspection.types.resource.expected=Object or resource name expected

skin.inspection.duplicate.resource.description=Looks for duplicate resource name in Skin files.
skin.inspection.duplicate.resource.display.name=Duplicate resource names in Skin files
skin.inspection.duplicate.resource.message=A resource with name ''{0}'' and type ''{1}'' is defined more than once in this file.
skin.inspection.duplicate.font.message=A font with name ''{0}'' is defined more than once in this file.

skin.inspection.malformed.color.description=Looks in Skin files for malformed color strings.
skin.inspection.malformed.color.display.name=Malformed color string

skin.inspection.missing.property.description=Looks for missing mandatory properties in Skin files.
skin.inspection.missing.property.display.name=Missing properties in Skin files
skin.inspection.missing.property.message=Property ''{0}'' is missing.

skin.inspection.duplicate.property.description=Looks for duplicate properties in Skin files.
skin.inspection.duplicate.property.display.name=Duplicate properties in Skin files
skin.inspection.duplicate.property.message=Property ''{0}'' has already been specified.

skin.inspection.abbr.class.description=Notes when a short class name can be used for a standard scene2d.ui class instead of the full class name (libGDX >= 1.9.9).
skin.inspection.abbr.class.display.name=Use short class name
skin.inspection.abbr.class.message=Short name ''{0}'' can be used instead of the fully qualified name.

skin.inspection.deprecated.description=Looks for the use of deprecated classes and fields in Skin files.
skin.inspection.deprecated.display.name=Usage of deprecated class/field
skin.inspection.deprecated.message=''{0}'' is deprecated.

skin.inspection.non.existing.file.description=Looks for non existing font files in Skin files.
skin.inspection.non.existing.file.display.name=Non existing font files in Skin files
skin.inspection.non.existing.file.message=File ''{0}'' does not exist.

skin.inspection.inspection.name.description=Looks in Skin files for @Suppress annotations with non existing inspection names.
skin.inspection.inspection.name.display.name=Suppressing an inspection which does not exist
skin.inspection.inspection.name.message=Inspection ''{0}'' does not exist. Valid inspection names are: {1}.

json.error.trailing.comma=No newline is allowed before a trailing comma.
json.error.unexpected.newline=Unexpected newline.
json.error.bracket.expected=Missing closing bracket }.
json.error.unexpected.comma=Unexpected comma.

json.inspection.invalid.escape.description=Marks invalid escape sequences in libGDX style JSON files.
json.inspection.invalid.escape.display.name=Invalid escape sequence
json.inspection.invalid.escape.message=Invalid escape sequence.

json.inspection.toplevel.value.description=The toplevel value of a JSON file should be an object.
json.inspection.toplevel.value.display.name=Invalid toplevel value
json.inspection.toplevel.value.message=The toplevel value of a JSON file should be an object.

json.inspection.duplicate.property.description=Looks for properties which are defined multiple times in the same object.
json.inspection.duplicate.property.display.name=Duplicate property
json.inspection.duplicate.property.message=Property ''{0}'' is defined more than once in this object.

# suppress inspection "UnusedProperty"
skin.file.detected=This looks like a libGDX Skin. Should this file be handled like a Skin file instead of a regular {0} file?
# suppress inspection "UnusedProperty"
json.file.detected=This looks like a libGDX style JSON file. Should this file be handled as such instead of a regular JSON file?

filetype.yes=Yes
filetype.no=No
filetype.do.not.bother=No and don't ask again

context.menu.mark.as.skin=Mark As libGDX Skin
context.menu.mark.as.non.skin=Unmark As libGDX Skin
context.menu.mark.as.gdx.json=Mark As libGDX Style JSON
context.menu.mark.as.non.gdx.json=Unmark As libGDX Style JSON

settings.enable.color.previews=Show previews of Color constants in Java and Kotlin code in the gutter
settings.enable.color.previews.json=Show previews of Colors in JSON files in the gutter
settings.enable.color.previews.skin=Show previews of Colors in Skin files in the gutter
settings.never.ask.about.skin.files=Never ask about treating JSON files which look like Skin files as Skin files
settings.never.ask.about.json.files=Never ask about treating JSON files which look like libGDX style JSON files as such

log.level.inspection=Overly verbose log level
log.level.problem.descriptor=In production builds the log level should probably be set to LOG_ERROR instead of LOG_INFO or LOG_DEBUG
log.level.html.description=Looks for calls to Gdx.app.setLogLevel() setting the log level to LOG_INFO or LOG_VERBOSE, which while useful for debugging should propably not be used in production builds.

nonexisting.asset.inspection=Resource doesn't exist
nonexisting.asset.inspection.html.description=Looks in Java and Kotlin code for usages of resources which don't exist. @GDXAssets annotated elements only.
nonexisting.asset.problem.descriptor=Resource "{0}" with type "{1}" does not exist {2}

unused.class.tag.inspection=Unused class tag
unused.class.tag.inspection.html.description=Looks for unused class tags in GDXTag annotations.
unused.class.tag.problem.descriptor=Tag "{0}" is never used

invalid.property.key.inspection=Property key does not exist
invalid.property.key.inspection.problem.descriptor=Property key "{0}" does not exist
invalid.property.key.inspection.html.description=Looks for the use of property keys which do not exist.

gdxassets.annotation.inspection=@GDXAssets problem
gdxassets.annotation.inspection.descriptor=Checks for problems related to @GDXAssets annotations
gdxassets.annotation.problem.descriptor.wrong.target=The @GDXAssets annotation should only be used on variables or fields of type Skin, TextureAtlas or I18NBundle
gdxassets.annotation.problem.descriptor.useless.parameter=Parameter "{0}" is only useful on variables of type {1}
gdxassets.annotation.problem.descriptor.nofile=File "{0}" does not exist in this project. Please specify a filenames relative to the project root (the project root is: "{1}").
gdxassets.annotation.problem.descriptor.not.a.skin=File "{0}" isn't registered as a Skin file. Go To Definition and Find Usages will not be available.

designed.for.tablets.inspection=Designed for tablets
designed.for.tablets.html.description=For your Android App to be listed as "Designed for tablets" in the Play Store, several criteria must be met as described at <a href="https://developer.android.com/distribute/essentials/quality/tablets.html">https://developer.android.com/distribute/essentials/quality/tablets.html</a>.<br />These criteria include: <ul><li>The targetSdkVersion OR minSdkVersion must be 11 or higher</li><li>If maxSdkVersion is declared it must be 11 or higher</li><li>If an \\&lt;supports-screens\\&gt; element is present it should not specify android:largeScreens="false" or android:xlargeScreens="false"</li><li>For apps targeting a minSdkVersion below 13, a \\&lt;supports-screens\\&gt; element must be declared with both android:largeScreens="true" and android:xlargeScreens="true"</li></ul><br />This inspection does not work correctly when using different product flavors with different SDK versions.
designed.for.tablets.problem.descriptor.target.or.min=Either targetSdkVersion or minSdkVersion must be 11 or higher to be listed as Designed for Tablets
designed.for.tablets.problem.descriptor.max=MaxSdkVersion must be 11 or higher to be listed as Designed for Tablets
designed.for.tablets.problem.descriptor.missing.support.screens=When minSdkVersion is below 13 a <supports-screens> element must be declared to be listed as Designed for Tablets
designed.for.tablets.problem.descriptor.large.false=android:largeScreens and android:xLargeScreens should not be false to be listed as Designed for Tablets
designed.for.tablets.problem.descriptor.large.missing=When minSdkVersion is below 13 a <supports-screens> element must be declared with both android:largeScreens=\"true\" and android:xlargeScreens=\"true\" to be listed as Designed for Tablets

flushing.inside.loop.inspection.name=Flushing a batch inside a loop
flushing.inside.loop.problem.descriptor=Possible flush inside a loop
flushing.inside.loop.html.description=Looks for the possibility of a flush of a batch or renderer occuring inside a loop, either directly or indirectly. <br />For performance reasons care should be taken to not cause unnecessary flushes, and to limit the number of flushes per frame as much as possible. <br />Note that calling SpriteBatch.draw(..) with a different texture also causes a flush, which is not detected by this inspection. Use a <a href="https://github.com/libgdx/libgdx/wiki/Texture-packer">Texture Atlas</a> instead of many different textures.

shaperenderer.64bit.crash.inspection.name=Using problematic ShapeRenderer
shaperenderer.64bit.crash.problem.descriptor=Using problematic ShapeRenderer
shaperenderer.64bit.crash.html.description=Using ShapeRenderer with libGDX versions prior to 1.9.2 causes a crash on ARM64 Android devices. Upgrade to libGDX to version 1.9.2 or higher (see <a href="https://github.com/libgdx/libgdx/issues/3790">https://github.com/libgdx/libgdx/issues/3790</a>).

profiling.code.inspection.name=Profiling code
profiling.code.problem.descriptor=Profiling code
profiling.code.html.description=Looks for profiling code, which should be disabled before release.

outdated.version.inspection.display.name=Outdated library versions
outdated.version.inspection.display.name.gradle=Outdated library versions in Gradle build files
outdated.version.inspection.display.name.gradle.kotlin=Outdated library versions in Gradle Kotlin build files
outdated.version.inspection.static.description=Looks for the use of outdated versions of some libGDX related libraries.<br><br>The following libraries are checked: {0}
outdated.version.inspection.msg=A newer version of {0} is available (version {1})

outdated.version.inspection.display.name.gradle.properties=Outdated library versions in gradle.properties files

missing.flush.inspection.name=Missing flush on Preferences
missing.flush.problem.descriptor=Missing flush after setting preferences
missing.flush.html.description=Call Preferences.flush() to make sure changes to preferences are persisted.

static.resources.inspection.name=Static resource
static.resources.problem.descriptor=Using static resource
static.resources.html.description=Don't make resources static, unless you take care to properly manage them. Static resources can cause problems on Android, because the life-cycle of a static variable is not necessarily the same as the life-cycle of your application.
static.resources.html.description.kotlin.note=<br /><br />Note that Kotlin top-level properties and properties of object literals and companion objects are compiled to static properties.

testid.name=Test/dummy IDs
testid.name.build.gradle=Test/dummy IDs in build.gradle
testid.name.gradle.properties=Test/dummy IDs in gradle.properties
testid.problem.descriptor=This is a test/dummy ID
testid.html.description=Looks for the use of some known test IDs.

no.opengl.directive.display.name=Missing OpenGL ES directive
no.opengl.directive.problem.descriptor=Missing appropriate OpenGL ES directive
no.opengl.html.description=If your application requires OpenGL ES 2 or 3 to function, add the appropriate declaration to the manifest: \\&lt;uses-feature android:glEsVersion="0x00020000" android:required="true" /\\&gt; or \\&lt;uses-feature android:glEsVersion="0x00030000" android:required="true" /\\&gt;.

missing.files.permissions.display.name=Missing permissions for using external files
missing.files.permissions.problem.descriptor=Missing WRITE_EXTERNAL_STORAGE permission
missing.files.permissions.html.desciption=If you want to use external storage on Android you have to declare the appropriate permissions in AndroidManifest.xml.

unsafeiterator.display.name=Use of non reentrant iterator method
unsafeiterator.problem.descriptor=Using non reentrant iterator method
unsafeiterator.html.description=Iterator methods on libGDX collections return the same iterator instance each time the method is called. For nested or multithreaded iteration create a new iterator using the appropriate constructor.
