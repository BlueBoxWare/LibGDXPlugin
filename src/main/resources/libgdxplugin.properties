#
# Copyright 2016 Blue Box Ware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
skin.file.detected=This looks like a LibGDX Skin. Should this file be handled like a Skin file instead of a regular JSON file?
skin.file.yes=Yes
skin.file.no=No
skin.file.do.not.bother=No and don't ask again

context.menu.mark.as.skin=Mark as LibGDX Skin
context.menu.mark.as.non.skin=Unmark as LibGDX Skin

settings.enable.color.previews=Show previews of Color constants in the gutter

log.level.inspection=Overly verbose log level
log.level.problem.descriptor=In production builds the log level should probably be set to LOG_ERROR instead of LOG_INFO or LOG_DEBUG
log.level.html.description=This inspection looks for calls to Gdx.app.setLogLevel() setting the log level to LOG_INFO or LOG_VERBOSE, which while useful for debugging should propably not be used in production builds.

designed.for.tablets.inspection=Designed for tablets
designed.for.tablets.html.description=For your Android App to be listed as "Designed for tablets" in the Play Store, several criteria must be met as described at <a href="https://developer.android.com/distribute/essentials/quality/tablets.html">https://developer.android.com/distribute/essentials/quality/tablets.html</a>.<br />These criteria include: <ul><li>The targetSdkVersion OR minSdkVersion must be 11 or higher</li><li>If maxSdkVersion is declared it must be 11 or higher</li><li>If an \\&lt;supports-screens\\&gt; element is present it should not specify android:largeScreens="false" or android:xlargeScreens="false"</li><li>For apps targeting a minSdkVersion below 13, a \\&lt;supports-screens\\&gt; element must be declared with both android:largeScreens="true" and android:xlargeScreens="true"</li></ul><br />This inspection does not work correctly when using different product flavors with different SDK versions.
designed.for.tablets.problem.descriptor.target.or.min=Either targetSdkVersion or minSdkVersion must be 11 or higher to be listed as Designed for Tablets
designed.for.tablets.problem.descriptor.max=MaxSdkVersion must be 11 or higher to be listed as Designed for Tablets
designed.for.tablets.problem.descriptor.missing.support.screens=When minSdkVersion is below 13 a <supports-screens> element must be declared to be listed as Designed for Tablets
designed.for.tablets.problem.descriptor.large.false=android:largeScreens and android:xLargeScreens should not be false to be listed as Designed for Tablets
designed.for.tablets.problem.descriptor.large.missing=When minSdkVersion is below 13 a <supports-screens> element must be declared with both android:largeScreens=\"true\" and android:xlargeScreens=\"true\" to be listed as Designed for Tablets

flushing.inside.loop.inspection.name=Flushing a batch inside a loop
flushing.inside.loop.problem.descriptor=Possible flush inside a loop
flushing.inside.loop.html.description=This inspection looks for the possibility of a flush of a batch or renderer occuring inside a loop, either directly or indirectly. <br />For performance reasons care should be taken to not cause unnecessary flushes, and to limit the number of flushes per frame as much as possible. <br />Note that calling SpriteBatch.draw(..) with a different texture also causes a flush, which is not detected by this inspection. Use a <a href="https://github.com/libgdx/libgdx/wiki/Texture-packer">Texture Atlas</a> instead of many different textures.

shaperenderer.64bit.crash.inspection.name=Using problematic ShapeRenderer
shaperenderer.64bit.crash.problem.descriptor=Using problematic ShapeRenderer
shaperenderer.64bit.crash.html.description=Using ShapeRenderer with LibGDX versions prior to 1.9.2 causes a crash on ARM64 Android devices. Upgrade to LibGDX to version 1.9.2 or higher (see <a href="https://github.com/libgdx/libgdx/issues/3790">https://github.com/libgdx/libgdx/issues/3790</a>).

profiling.code.inspection.name=Profiling code
profiling.code.problem.descriptor=Profiling code
profiling.code.html.description=This inspection looks for profiling code, which should be disabled before release.

outdated.versions.inspection.name=Outdated versions
outdated.versions.problem.descriptor=A newer version is available
outdated.versions.html.description=This inspection looks for the use of outdated versions of GDX and related libraries (Box2DLight, Ashley, ai, Overlap2d).

missing.flush.inspection.name=Missing flush on Preferences
missing.flush.problem.descriptor=Missing flush after setting preferences
missing.flush.html.description=Call Preferences.flush() to make sure changes to preferences are persisted.

static.resources.inspection.name=Static resource
static.resources.problem.descriptor=Using static resource
static.resources.html.description=Don't make resources static, unless you take care to properly manage them. Static resources can cause problems on Android, because the life-cycle of a static variable is not necessarily the same as the life-cycle of your application.
static.resources.html.description.kotlin.note=<br /><br />Note that Kotlin top-level properties and properties of object literals and companion objects are compiled to static properties.

testid.name=Test ids
testid.problem.descriptor=Test Id
testid.html.description=This inspection looks for the use test ids (currently AdMob ids only).

no.opengl.directive.display.name=Missing OpenGL ES directive
no.opengl.directive.problem.descriptor=Missing OpenGL ES directive
no.opengl.html.description=If your application requires OpenGL ES 2 or 3 to function, add the appropriate declaration to the manifest: \\&lt;uses-feature android:glEsVersion="0x00020000" android:required="true" /\\&gt; or \\&lt;uses-feature android:glEsVersion="0x00030000" android:required="true" /\\&gt;.

unsafeiterator.display.name=Use of non reentrant iterator method
unsafeiterator.problem.descriptor=Using non reentrant iterator method
unsafeiterator.html.description=Iterator methods on LibGDX collections return the same iterator instance each time the method is called. For nested or multithreaded iteration create a new iterator using the appropriate constructor.

collection.classes=Array;ArrayMap;IdentityMap;IntFloatMap;IntIntMap;IntMap;IntSet;LongMap;ObjectFloatMap;ObjectIntMap;ObjectMap;ObjectSet;OrderedMap;OrderedSet;Predicate.PredicateIterable;Queue;SortedIntList

# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.Array.iterators=iterator;select
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.ArrayMap.iterators=entries;iterator;keys;values
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.IdentityMap.iterators=entries;iterator;keys;values
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.IntFloatMap.iterators=entries;iterator;keys;values
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.IntIntMap.iterators=entries;iterator;keys;values
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.IntMap.iterators=entries;iterator;keys;values
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.IntSet.iterators=iterator
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.LongMap.iterators=entries;iterator;keys;values
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.ObjectFloatMap.iterators=entries;iterator;keys;values
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.ObjectIntMap.iterators=entries;iterator;keys;values
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.ObjectMap.iterators=entries;iterator;keys;values
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.ObjectSet.iterators=iterator
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.OrderedMap.iterators=entries;iterator;keys;values
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.OrderedSet.iterators=iterator
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.Predicate.PredicateIterable.iterators=iterator
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.Queue.iterators=iterator
# suppress inspection "UnusedProperty"
com.badlogic.gdx.utils.SortedIntList.iterators=iterator
